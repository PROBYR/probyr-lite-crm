// Code generated by the Encore 1.49.3 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly activities: activities.ServiceClient
    public readonly company: company.ServiceClient
    public readonly deals: deals.ServiceClient
    public readonly imports: imports.ServiceClient
    public readonly integrations: integrations.ServiceClient
    public readonly outreach: outreach.ServiceClient
    public readonly people: people.ServiceClient
    public readonly pipelines: pipelines.ServiceClient
    public readonly stages: stages.ServiceClient
    public readonly tags: tags.ServiceClient
    public readonly tasks: tasks.ServiceClient
    public readonly users: users.ServiceClient
    public readonly webhooks: webhooks.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.activities = new activities.ServiceClient(base)
        this.company = new company.ServiceClient(base)
        this.deals = new deals.ServiceClient(base)
        this.imports = new imports.ServiceClient(base)
        this.integrations = new integrations.ServiceClient(base)
        this.outreach = new outreach.ServiceClient(base)
        this.people = new people.ServiceClient(base)
        this.pipelines = new pipelines.ServiceClient(base)
        this.stages = new stages.ServiceClient(base)
        this.tags = new tags.ServiceClient(base)
        this.tasks = new tasks.ServiceClient(base)
        this.users = new users.ServiceClient(base)
        this.webhooks = new webhooks.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { listActivities as api_activities_list_activities_listActivities } from "~backend/activities/list_activities";

export namespace activities {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.listActivities = this.listActivities.bind(this)
        }

        /**
         * Retrieves activities with optional filtering.
         */
        public async listActivities(params: RequestType<typeof api_activities_list_activities_listActivities>): Promise<ResponseType<typeof api_activities_list_activities_listActivities>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                activityType: params.activityType,
                dealId:       params.dealId === undefined ? undefined : String(params.dealId),
                limit:        params.limit === undefined ? undefined : String(params.limit),
                offset:       params.offset === undefined ? undefined : String(params.offset),
                personId:     params.personId === undefined ? undefined : String(params.personId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/activities`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_activities_list_activities_listActivities>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { listCompanies as api_company_list_companies_listCompanies } from "~backend/company/list_companies";

export namespace company {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.listCompanies = this.listCompanies.bind(this)
        }

        /**
         * Retrieves all companies.
         */
        public async listCompanies(): Promise<ResponseType<typeof api_company_list_companies_listCompanies>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/companies`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_company_list_companies_listCompanies>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createDeal as api_deals_create_deal_createDeal } from "~backend/deals/create_deal";
import { listDeals as api_deals_list_deals_listDeals } from "~backend/deals/list_deals";
import { testDealValueCasting as api_deals_test_deals_testDealValueCasting } from "~backend/deals/test_deals";
import { updateDealStage as api_deals_update_deal_stage_updateDealStage } from "~backend/deals/update_deal_stage";

export namespace deals {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createDeal = this.createDeal.bind(this)
            this.listDeals = this.listDeals.bind(this)
            this.testDealValueCasting = this.testDealValueCasting.bind(this)
            this.updateDealStage = this.updateDealStage.bind(this)
        }

        /**
         * Creates a new deal.
         */
        public async createDeal(params: RequestType<typeof api_deals_create_deal_createDeal>): Promise<ResponseType<typeof api_deals_create_deal_createDeal>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deals`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deals_create_deal_createDeal>
        }

        /**
         * Retrieves deals with optional filtering.
         */
        public async listDeals(params: RequestType<typeof api_deals_list_deals_listDeals>): Promise<ResponseType<typeof api_deals_list_deals_listDeals>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:    params.limit === undefined ? undefined : String(params.limit),
                offset:   params.offset === undefined ? undefined : String(params.offset),
                personId: params.personId === undefined ? undefined : String(params.personId),
                stageId:  params.stageId === undefined ? undefined : String(params.stageId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deals`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deals_list_deals_listDeals>
        }

        /**
         * Test endpoint to verify deal value casting works correctly
         */
        public async testDealValueCasting(params: RequestType<typeof api_deals_test_deals_testDealValueCasting>): Promise<ResponseType<typeof api_deals_test_deals_testDealValueCasting>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deals/test-value-casting`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deals_test_deals_testDealValueCasting>
        }

        /**
         * Updates a deal's stage and optionally sets loss reason.
         */
        public async updateDealStage(params: RequestType<typeof api_deals_update_deal_stage_updateDealStage>): Promise<ResponseType<typeof api_deals_update_deal_stage_updateDealStage>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                lossReason: params.lossReason,
                stageId:    params.stageId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deals/${encodeURIComponent(params.id)}/stage`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deals_update_deal_stage_updateDealStage>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createImport as api_imports_create_import_createImport } from "~backend/imports/create_import";
import { getImportStatus as api_imports_get_import_status_getImportStatus } from "~backend/imports/get_import_status";

export namespace imports {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createImport = this.createImport.bind(this)
            this.getImportStatus = this.getImportStatus.bind(this)
        }

        /**
         * Creates a new import job and processes the CSV data.
         */
        public async createImport(params: RequestType<typeof api_imports_create_import_createImport>): Promise<ResponseType<typeof api_imports_create_import_createImport>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/imports`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_imports_create_import_createImport>
        }

        /**
         * Retrieves the status of an import job.
         */
        public async getImportStatus(params: { id: number }): Promise<ResponseType<typeof api_imports_get_import_status_getImportStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/imports/${encodeURIComponent(params.id)}/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_imports_get_import_status_getImportStatus>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getEmailSettings as api_integrations_get_email_settings_getEmailSettings } from "~backend/integrations/get_email_settings";
import { updateEmailSettings as api_integrations_update_email_settings_updateEmailSettings } from "~backend/integrations/update_email_settings";

export namespace integrations {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getEmailSettings = this.getEmailSettings.bind(this)
            this.updateEmailSettings = this.updateEmailSettings.bind(this)
        }

        /**
         * Retrieves company email settings.
         */
        public async getEmailSettings(): Promise<ResponseType<typeof api_integrations_get_email_settings_getEmailSettings>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/integrations/email`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_integrations_get_email_settings_getEmailSettings>
        }

        /**
         * Updates company email settings.
         */
        public async updateEmailSettings(params: RequestType<typeof api_integrations_update_email_settings_updateEmailSettings>): Promise<void> {
            await this.baseClient.callTypedAPI(`/integrations/email`, {method: "POST", body: JSON.stringify(params)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { bookMeeting as api_outreach_book_meeting_bookMeeting } from "~backend/outreach/book_meeting";
import { sendEmail as api_outreach_send_email_sendEmail } from "~backend/outreach/send_email";

export namespace outreach {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.bookMeeting = this.bookMeeting.bind(this)
            this.sendEmail = this.sendEmail.bind(this)
        }

        /**
         * Books a meeting and logs it as an activity.
         */
        public async bookMeeting(params: RequestType<typeof api_outreach_book_meeting_bookMeeting>): Promise<ResponseType<typeof api_outreach_book_meeting_bookMeeting>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/outreach/meetings`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_outreach_book_meeting_bookMeeting>
        }

        /**
         * Sends a one-to-one sales email and logs it as an activity.
         */
        public async sendEmail(params: RequestType<typeof api_outreach_send_email_sendEmail>): Promise<ResponseType<typeof api_outreach_send_email_sendEmail>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/outreach/emails`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_outreach_send_email_sendEmail>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createPerson as api_people_create_person_createPerson } from "~backend/people/create_person";
import { deletePerson as api_people_delete_person_deletePerson } from "~backend/people/delete_person";
import { getPerson as api_people_get_person_getPerson } from "~backend/people/get_person";
import { listPeople as api_people_list_people_listPeople } from "~backend/people/list_people";
import { updatePerson as api_people_update_person_updatePerson } from "~backend/people/update_person";

export namespace people {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createPerson = this.createPerson.bind(this)
            this.deletePerson = this.deletePerson.bind(this)
            this.getPerson = this.getPerson.bind(this)
            this.listPeople = this.listPeople.bind(this)
            this.updatePerson = this.updatePerson.bind(this)
        }

        /**
         * Creates a new person.
         */
        public async createPerson(params: RequestType<typeof api_people_create_person_createPerson>): Promise<ResponseType<typeof api_people_create_person_createPerson>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/people`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_people_create_person_createPerson>
        }

        /**
         * Deletes a person.
         */
        public async deletePerson(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/people/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a single person by ID.
         */
        public async getPerson(params: { id: number }): Promise<ResponseType<typeof api_people_get_person_getPerson>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/people/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_people_get_person_getPerson>
        }

        /**
         * Retrieves people with optional search, filtering, and sorting.
         */
        public async listPeople(params: RequestType<typeof api_people_list_people_listPeople>): Promise<ResponseType<typeof api_people_list_people_listPeople>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
                search: params.search,
                sortBy: params.sortBy,
                tagIds: params.tagIds,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/people`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_people_list_people_listPeople>
        }

        /**
         * Updates an existing person.
         */
        public async updatePerson(params: RequestType<typeof api_people_update_person_updatePerson>): Promise<ResponseType<typeof api_people_update_person_updatePerson>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                companyId: params.companyId,
                email:     params.email,
                firstName: params.firstName,
                jobTitle:  params.jobTitle,
                lastName:  params.lastName,
                phone:     params.phone,
                status:    params.status,
                tagIds:    params.tagIds,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/people/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_people_update_person_updatePerson>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_pipelines_create_create } from "~backend/pipelines/create";
import { get as api_pipelines_get_get } from "~backend/pipelines/get";
import { list as api_pipelines_list_list } from "~backend/pipelines/list";

export namespace pipelines {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
        }

        /**
         * Creates a new pipeline.
         */
        public async create(params: RequestType<typeof api_pipelines_create_create>): Promise<ResponseType<typeof api_pipelines_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pipelines`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_pipelines_create_create>
        }

        /**
         * Retrieves detailed information about a single pipeline, including stages and deals.
         */
        public async get(params: { id: number }): Promise<ResponseType<typeof api_pipelines_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pipelines/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_pipelines_get_get>
        }

        /**
         * Lists all pipelines for a company.
         */
        public async list(): Promise<ResponseType<typeof api_pipelines_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pipelines`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_pipelines_list_list>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { listStages as api_stages_list_stages_listStages } from "~backend/stages/list_stages";

export namespace stages {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.listStages = this.listStages.bind(this)
        }

        /**
         * Retrieves deal stages for a company, ordered by position.
         */
        public async listStages(params: RequestType<typeof api_stages_list_stages_listStages>): Promise<ResponseType<typeof api_stages_list_stages_listStages>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                companyId:  params.companyId === undefined ? undefined : String(params.companyId),
                pipelineId: params.pipelineId === undefined ? undefined : String(params.pipelineId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/stages`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stages_list_stages_listStages>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createTag as api_tags_create_tag_createTag } from "~backend/tags/create_tag";
import { listTags as api_tags_list_tags_listTags } from "~backend/tags/list_tags";

export namespace tags {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createTag = this.createTag.bind(this)
            this.listTags = this.listTags.bind(this)
        }

        /**
         * Creates a new tag.
         */
        public async createTag(params: RequestType<typeof api_tags_create_tag_createTag>): Promise<ResponseType<typeof api_tags_create_tag_createTag>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tags`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tags_create_tag_createTag>
        }

        /**
         * Retrieves all tags for a company.
         */
        public async listTags(params: RequestType<typeof api_tags_list_tags_listTags>): Promise<ResponseType<typeof api_tags_list_tags_listTags>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                companyId: params.companyId === undefined ? undefined : String(params.companyId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tags`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tags_list_tags_listTags>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createTask as api_tasks_create_task_createTask } from "~backend/tasks/create_task";
import { listTasks as api_tasks_list_tasks_listTasks } from "~backend/tasks/list_tasks";
import { updateTask as api_tasks_update_task_updateTask } from "~backend/tasks/update_task";

export namespace tasks {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createTask = this.createTask.bind(this)
            this.listTasks = this.listTasks.bind(this)
            this.updateTask = this.updateTask.bind(this)
        }

        /**
         * Creates a new task.
         */
        public async createTask(params: RequestType<typeof api_tasks_create_task_createTask>): Promise<ResponseType<typeof api_tasks_create_task_createTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tasks_create_task_createTask>
        }

        /**
         * Retrieves tasks with optional filtering.
         */
        public async listTasks(params: RequestType<typeof api_tasks_list_tasks_listTasks>): Promise<ResponseType<typeof api_tasks_list_tasks_listTasks>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                assignedTo:  params.assignedTo === undefined ? undefined : String(params.assignedTo),
                dealId:      params.dealId === undefined ? undefined : String(params.dealId),
                dueAfter:    params.dueAfter,
                dueBefore:   params.dueBefore,
                isCompleted: params.isCompleted === undefined ? undefined : String(params.isCompleted),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                personId:    params.personId === undefined ? undefined : String(params.personId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tasks_list_tasks_listTasks>
        }

        /**
         * Updates an existing task.
         */
        public async updateTask(params: RequestType<typeof api_tasks_update_task_updateTask>): Promise<ResponseType<typeof api_tasks_update_task_updateTask>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                assignedTo:  params.assignedTo,
                description: params.description,
                dueDate:     params.dueDate,
                isCompleted: params.isCompleted,
                title:       params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_tasks_update_task_updateTask>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { deleteUsers as api_users_delete_users_deleteUsers } from "~backend/users/delete_users";
import { inviteUser as api_users_invite_inviteUser } from "~backend/users/invite";
import { listUsers as api_users_list_users_listUsers } from "~backend/users/list_users";
import { updateUser as api_users_update_user_updateUser } from "~backend/users/update_user";

export namespace users {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteUsers = this.deleteUsers.bind(this)
            this.inviteUser = this.inviteUser.bind(this)
            this.listUsers = this.listUsers.bind(this)
            this.updateUser = this.updateUser.bind(this)
        }

        /**
         * Deletes one or more users.
         */
        public async deleteUsers(params: RequestType<typeof api_users_delete_users_deleteUsers>): Promise<void> {
            await this.baseClient.callTypedAPI(`/users/delete`, {method: "POST", body: JSON.stringify(params)})
        }

        /**
         * Invites a new user to a company.
         */
        public async inviteUser(params: RequestType<typeof api_users_invite_inviteUser>): Promise<ResponseType<typeof api_users_invite_inviteUser>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users/invite`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_invite_inviteUser>
        }

        /**
         * Retrieves all users for a company.
         */
        public async listUsers(): Promise<ResponseType<typeof api_users_list_users_listUsers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_list_users_listUsers>
        }

        /**
         * Updates an existing user.
         */
        public async updateUser(params: RequestType<typeof api_users_update_user_updateUser>): Promise<ResponseType<typeof api_users_update_user_updateUser>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                email:     params.email,
                firstName: params.firstName,
                isActive:  params.isActive,
                lastName:  params.lastName,
                role:      params.role,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_update_user_updateUser>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { processBCCEmail as api_webhooks_bcc_email_processBCCEmail } from "~backend/webhooks/bcc_email";
import { processFormSubmission as api_webhooks_forms_integration_processFormSubmission } from "~backend/webhooks/forms_integration";

export namespace webhooks {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.processBCCEmail = this.processBCCEmail.bind(this)
            this.processFormSubmission = this.processFormSubmission.bind(this)
        }

        /**
         * Processes incoming BCC emails and creates activity records.
         */
        public async processBCCEmail(params: RequestType<typeof api_webhooks_bcc_email_processBCCEmail>): Promise<ResponseType<typeof api_webhooks_bcc_email_processBCCEmail>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/webhooks/bcc-email`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_webhooks_bcc_email_processBCCEmail>
        }

        /**
         * Processes form submissions and creates person and deal records.
         */
        public async processFormSubmission(params: RequestType<typeof api_webhooks_forms_integration_processFormSubmission>): Promise<ResponseType<typeof api_webhooks_forms_integration_processFormSubmission>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/webhooks/form-submission`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_webhooks_forms_integration_processFormSubmission>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.49.3)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
